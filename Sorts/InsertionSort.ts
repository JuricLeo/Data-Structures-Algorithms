// T: O(n^2)

// [5,4,3,6,2,1,5,4,6]
// [4,5,3,6,2,1,5,4,6]
// [4,5,5,6,2,1,5,4,6] => [3,4,5,6,2,1,5,4,6]
// [3,4,5,6,2,1,5,4,6]
// [3,4,5,6,6,1,5,4,6] => [3,4,5,5,6,1,5,4,6] => [3,4,4,5,6,1,5,4,6] => [3,3,4,5,6,1,5,4,6] => [2,3,4,5,6,1,5,4,6]
// [2,3,4,5,6,6,5,4,6] => [2,3,4,5,6,6,5,4,6] => [2,3,4,5,5,6,5,4,6] => [2,3,4,4,5,6,5,4,6] => [2,3,3,4,5,6,5,4,6] => [2,2,3,4,5,6,5,4,6] => [1,2,3,4,5,6,5,4,6]
// [1,2,3,4,5,6,6,4,6] => [1,2,3,4,5,5,6,4,6]
// [1,2,3,4,5,5,6,6,6] => [1,2,3,4,5,5,5,6,6] => [1,2,3,4,4,5,5,6,6] 

function InsertionSort(arr: number[]): number[] {
  for (let i = 0; i < arr.length; i++) {
    const temp = arr[i];
    let j = i - 1;

    while (j >= 0 && arr[j] > temp) {
      arr[j + 1] = arr[j];
      j--;
    }

    arr[j + 1] = temp;
  }

  return arr;
}

const sorted = InsertionSort([5, 4, 3, 6, 2, 1, 5, 4, 6]);

console.log(sorted);
